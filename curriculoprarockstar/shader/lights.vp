#version 130 

 in vec3 vertexPosition;
 in vec3 vertexNormal;



//out vec3 aCor; //envia aCor pra fp
out vec3 aCor; //envia aCor pra fp

//uniform vec3 ambientLight;


uniform vec3 eyePositionWorld;
uniform mat4 fullTransformationMatrix;
uniform vec3 vertexColor;
uniform vec3 lightPosition;

uniform int diffuse;
uniform int ambient;
uniform int specular;

uniform vec3 specularIntensity;

void main(){
  //gl_Position.xyz = vertexPosition;
  //gl_Position.w = 1.0;
  //or gl_Position =  vec4(vec3, 1.0);
  

  vec4 v = vec4(vertexPosition,1.0);
  gl_Position = fullTransformationMatrix *  v;

  //theNormal=vertexNormal;
  //thePosition=vertexPosition;

  //AMBIENTE
  //aCor =  vec3(1.0,0.0,1.0);

  //prepara ambiente
  vec3 ambientVec;
  if(ambient==1){
    float forca = 0.7;
    ambientVec = forca * vertexColor;
  }else{
    ambientVec = vec3(0.0,0.0,0.0);
  }


  //Difusa
 
   //vec3 lightVector = normalize(lightPosition - normalize(vertexPosition) );
   //float diff = max(dot(vertexNormal,lightPosition),0.0);
   //vec3 diffuse = diff * vec3(1.0,1.0,1.0);
  
  vec3 lightVector;
  float diff;
  vec3 diffuseVec;

  if(diffuse==1){

    lightVector = ( normalize(lightPosition - normalize(vertexPosition) ) );
    diff = ( max(dot(vertexNormal,lightVector),0.0) );
    diffuseVec = ( diff * vec3(1.0,1.0,1.0) );
  }else{
     diffuseVec = vec3(0.0,0.0,0.0);
  }
  
  
  lightVector = ( normalize(lightPosition - normalize(vertexPosition) ) );
  
  
  
  //aCor = ( (ambient + diffuse)  * vertexColor ); 
   // lightVector = normalize(lightPosition[1] - normalize(vertexPosition) );
   // diff = max(dot(vertexNormal,lightPosition[1]),0.0);
   // diffuse = diffuse + (diff * vec3(1.0,1.0,1.0));
  //aCor = (vec3(1.0,0.5,1.0) * 0.5 ) * max(dot(lightVector, vertexNormal),0.0);




  //Difusa 2
  //vec3 lightVector = normalize(lightPosition - vertexPosition);
  //float brightness = dot(lightVector, vertexNormal);
  //aCor=vec4(brightness,brightness,brightness,1);

  
  //Difusa 3
  //vec3 lightVector = normalize(lightPosition - vertexPosition);
  //float brightness = dot(lightVector, vertexPosition );    //vertexPosition
  //vec4 diffuseLight = vec4(brightness,brightness,brightness,1.0);

  vec3 specularLightVec;
  //Specular
  if(specular==1){
    vec3 reflectedLightVectorWorld = reflect (-lightVector, normalize(vertexPosition)); //calcula o vetor R utilizando o normal no ponto + o vetor da posição da luz 
    vec3 eyeVectorWorld = normalize(eyePositionWorld - vertexPosition);     // calcula o vetor E                       
    float s = dot(reflectedLightVectorWorld,eyeVectorWorld);  // calcula a especularidade
    s=pow(s,50.0);                                             //coeficiente especular
    specularLightVec = vec3(s,s,s);                       
  }else{
    specularLightVec = vec3(0.0,0.0,0.0);
  }


  aCor = (ambientVec + diffuseVec + clamp(specularLightVec,0,1)) * vertexColor;



}
